{"meta":{"title":"Cyrus's Blog","subtitle":"迷阵","description":null,"author":"Cyrus","url":"http://kaell.top"},"pages":[{"title":"Categories","date":"2017-06-21T12:55:51.000Z","updated":"2017-07-23T15:11:14.048Z","comments":true,"path":"categories/index.html","permalink":"http://kaell.top/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2017-06-21T12:55:39.000Z","updated":"2017-07-23T15:11:08.719Z","comments":false,"path":"tags/index.html","permalink":"http://kaell.top/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"openlayers 从台风风圈绘制到canvas样式和图层的应用","slug":"openlayers-canvas-typhoon","date":"2017-07-31T14:31:02.000Z","updated":"2017-08-02T03:04:07.758Z","comments":true,"path":"2017/07/31/openlayers-canvas-typhoon/","link":"","permalink":"http://kaell.top/2017/07/31/openlayers-canvas-typhoon/","excerpt":"","text":"本文中所使用的数据来源于温州台风网，通过F12抓取，你可以在我的GitHub上查看数据和本文源代码 &nbsp;&nbsp;台风的风圈是一种不常见但算的上规则的图形，在上面的网站可以看到最终效果，简单的解剖下其实就是四个1/4圆 从数据结构上也可以看出来：var radius_quad = &#123; \"ne\": 250, //单位为KM \"se\": 250, \"sw\": 180, \"nw\": 150&#125; 在某个固定经纬度点上，以此点为圆心组合成了一个所谓的风圈形状，四个方向分别代表每个1/4圆的半径。刚开始是为了实现这种效果进行了研究，后来发现openlayers对于这种效果的支持还挺有意思，记录下来已做分享。 通过自定义geometry的实现&nbsp;&nbsp;最原始的思路也是最容易切入的点，就是去看openlayers中怎么实现圆形的画法，在ol中，有createRegularPolygon这个类，原理就是给定一些参数，用点去填充我们想要的形状，当填进去点达到一定密集度，自然就能得到一个近似的圆。&nbsp;&nbsp;通过这个思路我们可以计算台风风圈的每个1/4圆的坐标，用点去占位，最终实现绘制出想要的图形。 具体代码可以去看某大牛的博客，这里只给出一个传送门，写的很详细了：点我乘坐飞机 这个算法还有些不完善，就是在每个1/4圆结束时候少计算了一个点，导致看着有点不对劲 特点: 这种方式画出来的图形是一个图层中的一个feature，好处自然不用多说，基本上feature支持的功能都能满足！ 通过canvas类型的symbol实现&nbsp;&nbsp;在点密集的情况下，用上面的方式其实效果已经很不错了，但是有些细（tiao）心（ci）的使用者，非要放大到一定程度，然后说你这个不够圆，那。。。。。 &nbsp;&nbsp;那我们就用canvas画出来，openlayers中，要素的样式是有这么一种方式ol.style.Icon来实现，我们可以把绘制好的元素作为Icon的参数var style = new ol.style.Style(&#123; image: new ol.style.Icon(&#123; opacity: 0.3, img: canvas, imgSize: [canvas.width, canvas.height], &#125;)&#125;) canvans绘制的方法：function createTyphoon(radius, radius_quad) &#123; var canvas = document.createElement('canvas'); canvas.width = canvas.height = 2 * radius; var context = canvas.getContext(\"2d\"); context.fillStyle = \"#0000ff\"; context.strokeStyle = \"#ff0000\"; context.lineWidth = 3; context.beginPath(); context.arc(radius, radius, radius_quad.se, 0, 0.5 * Math.PI); context.lineTo(radius, radius + radius_quad.sw); context.arc(radius, radius, radius_quad.sw, 0.5 * Math.PI, Math.PI); context.lineTo(radius - radius_quad.nw, radius); context.arc(radius, radius, radius_quad.nw, Math.PI, 1.5 * Math.PI); context.lineTo(radius, radius - radius_quad.ne); context.arc(radius, radius, radius_quad.ne, 1.5 * Math.PI, 0); context.lineTo(radius + radius_quad.se, radius); context.fill(); context.stroke(); return canvas;&#125; 效果如下图： 本方法完整代码 特点： 这种方式，绘制出来的台风风圈其实只是一个symbol符号，需要把这个符号赋给一个具体的要素，比如一个点，一个圆之类的，而且根据分辨率还要去调整样式的缩放map.getView().on('change:resolution', function () &#123; var style = shape.getStyle(); // 重新设置图标的缩放率 style.getImage().setScale(this.getZoom() / 8); shape.setStyle(style);&#125;) 通过canvas图层的方式实现&nbsp;&nbsp;再后来转念一想，既然支持canvas的symbol，为何不直接使用canvas绘制固定元素呢，果然在API中找到了ol.source.ImageCanvas，直接把canvas要素当作图层来使用！ ol.source.ImageCanvas的绘制有点需要特别注意的点，这里给出重要代码片段，完整demo可以去GitHub查看 创建图层，在canvasFunction中写具体的绘图方法var canvasLayer = new ol.layer.Image(&#123; source: new ol.source.ImageCanvas(&#123; canvasFunction: canvasFunction, projection: 'EPSG:3857' &#125;)&#125;); canvasFunction中一定要注意画布和地图的偏移处理，还要通过分辨率计算实际风圈大小//计算画布和地图四至的偏移量var mapExtent = map.getView().calculateExtent(map.getSize())var canvasOrigin = map.getPixelFromCoordinate([extent[0], extent[3]]);var mapOrigin = map.getPixelFromCoordinate([mapExtent[0], mapExtent[3]]);var delta = [mapOrigin[0] - canvasOrigin[0], mapOrigin[1] - canvasOrigin[1]] //在计算台风风圈的中心点时要补充计算偏移量var point = ol.proj.transform(coordinate, 'EPSG:4326', 'EPSG:3857');var pixel = map.getPixelFromCoordinate(point);var cX = pixel[0] + delta[0], cY = pixel[1] + delta[1]; //利用canvasFunction提供的默认参数分辨率，计算准确的坐标var radius_quad = &#123; \"ne\": 250000 / resolution, \"se\": 250000 / resolution, \"sw\": 180000 / resolution, \"nw\": 150000 / resolution&#125; 最终效果如下，我在同一图层中绘制了多个： 至于绘制canvas的方法和上面的symbol是一样的。具体代码还请移步GitHub(原谅我厚颜无耻的屡次打广告！) 特点：这种方式可以在一个图层中添加多个风圈要素，同时图层支持的功能也比较多，基本满足需求，效果也还行 &nbsp;&nbsp;这篇应用主要是从一个基本的需求所拓展开来的，canvas图层的应用我想应该很强大，刚开始研究openlyaers，相比于arcgis，ol很多功能可能要自己实现，但似乎效果上还是能让人满意的，欢迎大家讨论。","categories":[],"tags":[{"name":"FE","slug":"FE","permalink":"http://kaell.top/tags/FE/"},{"name":"GIS","slug":"GIS","permalink":"http://kaell.top/tags/GIS/"},{"name":"OpenLayers","slug":"OpenLayers","permalink":"http://kaell.top/tags/OpenLayers/"}]},{"title":"element dialog组件嵌套问题的临时方案","slug":"vue-dialog-nested","date":"2017-06-23T14:09:55.000Z","updated":"2017-07-23T14:30:49.685Z","comments":true,"path":"2017/06/23/vue-dialog-nested/","link":"","permalink":"http://kaell.top/2017/06/23/vue-dialog-nested/","excerpt":"&emsp;&emsp;最近用 Vue+element 开发项目时，在dialog组件上嵌套使用dialog组件或是MessageBox这类弹框组件，发现会出现遮罩层重合之类的问题，导致很多人只能选择关闭遮罩层。GitHub上就此问题也出现过类似讨论。有几种解决方案：","text":"&emsp;&emsp;最近用 Vue+element 开发项目时，在dialog组件上嵌套使用dialog组件或是MessageBox这类弹框组件，发现会出现遮罩层重合之类的问题，导致很多人只能选择关闭遮罩层。GitHub上就此问题也出现过类似讨论。有几种解决方案： 按照官方所说，将多个dialog类组件全部移动至&lt;body&gt;标签下 Github上某位大牛给出了不完全解决方案，基本思路仍然是将添加在&lt;el-dialog&gt;内的dom结构自动移动至&lt;body&gt;标签下。这个方式测试了下，似乎纯dialog嵌套问题不大，但是如果dialog内部包含了其他组件会有点问题，智者见智，自行探索了 &emsp;&emsp;附上连接 编写自己modal遮罩层，这里给出个不完全临时代码仅供参考 Vue.prototype.$Modal = &#123; open(element) &#123; var index = 1; var wrapper = element.querySelector('.el-dialog__wrapper'); if (wrapper) &#123; index = wrapper.style.zIndex - 1; &#125; var modalDom = document.createElement('div'); modalDom.className = 'v-modal'; element.appendChild(modalDom); modalDom.style.zIndex = index; &#125;, close() &#123; var modal = document.getElementsByClassName('v-modal')[0; modal.parentNode.removeChild(modal); &#125;&#125; &emsp;&emsp;一般调用方法mounted: function () &#123; var that = this; this.$nextTick(function () &#123; //遮罩层 that.$nextTick(function () &#123; that.$Modal.open(that.$el); &#125;); &#125;);&#125;, &emsp;&emsp;主要想法就是在组件mounted完成的nextTick后，为页面中添加一个div，样式就直接采用element自己的了，因为遮罩层是添加在dialog组件下的，因此组件销毁后也会自己销毁，close方法也没用上，但也应该会遇到有用上的时候吧。","categories":[],"tags":[{"name":"FE","slug":"FE","permalink":"http://kaell.top/tags/FE/"},{"name":"Vue","slug":"Vue","permalink":"http://kaell.top/tags/Vue/"}]}]}